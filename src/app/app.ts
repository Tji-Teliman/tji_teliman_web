import { Component, OnInit, signal } from '@angular/core';
import { Router, RouterOutlet, NavigationEnd } from '@angular/router'; // üí° Importez Router, NavigationEnd
import { filter } from 'rxjs/operators';
// Importez le composant de la barre lat√©rale
import { SidebarComponent } from './components/ui/sidebar/sidebar';

@Component({
  selector: 'app-root',
  // Ajoutez SidebarComponent aux imports pour qu'il soit utilisable dans le template
  imports: [RouterOutlet, SidebarComponent],
  templateUrl: './app.html',
  styleUrl: './app.css',
})
export class App implements OnInit { // Impl√©mentez OnInit
  protected readonly title = signal('tji_teliman_web');

  // Signal pour contr√¥ler si la barre lat√©rale doit √™tre visible
  protected showSidebar = signal(true);

  // Injectez le service Router
  constructor(private router: Router) {}

  ngOnInit() {
    // Abonnement aux √©v√©nements de navigation
    this.router.events.pipe(
      // Filtrer uniquement les √©v√©nements de fin de navigation (quand une route est charg√©e)
      filter((event) => event instanceof NavigationEnd)
    ).subscribe((event) => {
      // V√©rifiez le chemin d'acc√®s apr√®s la navigation.
      const url = (event as NavigationEnd).urlAfterRedirects;

      // Liste des chemins o√π la sidebar DOIT √äTRE CACH√âE
      // Ajoutez ici toutes les "pages" o√π vous ne voulez pas la sidebar (ex: login, inscription, 404, etc.)
      const routesToHideSidebar = ['/login'];

      // Mettre √† jour le signal : cacher la sidebar si l'URL courante est dans la liste.
      this.showSidebar.set(!routesToHideSidebar.includes(url));

      console.log(`Navigation vers: ${url}. Sidebar visible: ${this.showSidebar()}`);
    });
  }
}
